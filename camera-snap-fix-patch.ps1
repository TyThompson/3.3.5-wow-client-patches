param (
    [string]$exePath
)

if (-not $exePath) {
    $exePath = Join-Path (Get-Location -PSProvider FileSystem) "wow.exe"
    Write-Host "No path provided. Using: $exePath"
}

# Backup the original WoW.exe
$backupPath = Join-Path (Split-Path $exePath) "wow backup.exe"
if (-not (Test-Path $backupPath)) {
    Copy-Item -Path $exePath -Destination $backupPath
    Write-Host "Backup created at: $backupPath"
} else {
    Write-Host "Backup already exists at: $backupPath"
}

$patches = @(
    @{ addr = 0x469A2C; bytes = [byte[]](0xE9, 0x71, 0xF0, 0x0B, 0x00, 0xF8, 0x13, 0xD4, 0x00, 0x8B, 0x1D, 0xFC) },
    @{ addr = 0x528AA2; bytes = [byte[]](0x8D, 0x4D, 0xF0, 0x51, 0x57, 0xFF, 0x15, 0xDC, 0xF5, 0x9D, 0x00, 0x8B, 0x45, 0xF0, 0x8B, 0x15, 0xF8, 0x13, 0xD4, 0x00, 0xE9, 0x7A, 0x0F, 0xF4, 0xFF) },
    @{ addr = 0x4691B1; bytes = [byte[]](0x89, 0xE5, 0x8B, 0x05, 0xFC, 0x13, 0xD4, 0x00, 0x8B, 0x0D, 0xF8, 0x13, 0xD4, 0x00, 0xEB, 0xC2, 0x7D, 0x03, 0x83, 0xC1, 0x01, 0x83, 0xC0, 0x32, 0x83, 0xC1, 0x32, 0x3B, 0x0D, 0xEC, 0xBC, 0xCA, 0x00, 0x7E, 0x03, 0x83, 0xE9, 0x01, 0x3B, 0x05, 0xF0, 0xBC, 0xCA, 0x00, 0x7E, 0x03, 0x83, 0xE8, 0x01, 0x83, 0xE9, 0x32, 0x83, 0xE8, 0x32, 0x89, 0x0D, 0xF8, 0x13, 0xD4, 0x00, 0x89, 0x05, 0xFC, 0x13, 0xD4, 0x00, 0x89, 0xEC, 0x5D, 0xE9, 0xB4, 0xF7, 0xFF, 0xFF, 0xEC, 0x5D, 0xC3, 0xC3) },
    @{ addr = 0x469183; bytes = [byte[]](0x83, 0xF8, 0x32, 0x7D, 0x03, 0x83, 0xC0, 0x01, 0x83, 0xF9, 0x32, 0xEB, 0x31) }
)

$fs = [System.IO.File]::Open($exePath, [System.IO.FileMode]::Open, [System.IO.FileAccess]::ReadWrite)
foreach ($patch in $patches) {
    $fs.Seek($patch.addr, [System.IO.SeekOrigin]::Begin) | Out-Null
    $fs.Write($patch.bytes, 0, $patch.bytes.Length)
    Write-Host "Patched $($patch.bytes.Length) bytes at 0x$($patch.addr.ToString('X'))"
}
$fs.Close()